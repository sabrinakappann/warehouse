DTO -> transfer data between controllers and service (no acess to DB)
Entities -> used by services to acess/controll data

Serializable -> can be transformed in bytes and, for example, turns into a json

MVC Template Engine vs WebServices:

    MVC Template Engine:
        requisitions -> controllers -> ... -> server itself returns html pages with the data (ex: JSP)

    WebServices :
        Browser responsable for set up pages (HTML, CSS, JS) -> Browser only the structured data to mount pages
        SPA (Single Page Application)
        Server only returns data structure (example: JSON)
        Rest Controllers:
            WebServices controllers pattern
            Same prefix for paths, actions defined by http method
            POST != PUT -> POST always add a new, put can update
            default 201 code when creating new resource; return its id

    Resources = REST Controllers


# impar = components
# par = compositions


PROFILES

- test: using H2 DB
- dev: mysql (run before launch in production)
- prod: auto-explaining


spring.jpa.open-in-view=false:
    - DB commits ends at service layer (JPA not open  at Controller)

@Transacional:
    import org.springframework.transaction.annotation.Transactional;
    ensures ACID properties
    allows another properties, such as readonly -> avoid db locking when only reading
    ** add em métodos do service


DTO
    "repository delegates the actual persistence of the aggregate roots to a DAO"
    MUST HAVE GETTERS AND SETTERS AND PRIVATE ATRIBUTES SUCH AS ENTITY CLASS
    communication between controllers and services -> instead of the entities directly


Classes resources = meus controllers


SecurityConfig => Created to allow access to project endpoints after add spring security


********* ANOTAR DTO E COLOCAR @Valid ANTES DO @RequestBody!!
Difference Between @NotNull, @NotEmpty, and @NotBlank Constraints in Bean Validation
VER EXEMPLOS DE TESTES AUTOMATIZADOS: https://www.baeldung.com/java-bean-validation-not-null-empty-blank
@NotNull = não permite String null
@NotEmpty = não permite null nem ""
@NotBlank = não permite null nem "" nem com x espaços dentro

Validação de CPF, email etc:
@Pattern(regexp = "...") // pegar regex de alguma fonte
********* ANOTAR DTO E COLOCAR @Valid ANTES DO @RequestBody!!


extends RuntimeException => not mandatory to deal with
User userEntity = obj.orElseThrow(); => if Optional obj don't return an User, throw exception
obj.orElseThrow(() -> new EntityNotFoundException("Usuário não encontrado!")); => () -> é fç lambda vazia p levar a exceção

@ControllerAdvice
Marca que essa classe lidará com todas exceções que acontecerem nesso controller que for colocada
    @ExceptionHandler(EntityNotFoundException.class) => marca q esse método intercepta excpt do tipo EntityNotFoundException
    return ResponseEntity.status(statusCode).body(error) =>
        => Builder de um novo ResponseEntity com status code personalizado e obj 'error' no body